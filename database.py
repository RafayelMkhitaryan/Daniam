from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import text


# chgidem xi senc cher ashxatum
# DATABASE_URL = "postgresql://postgres:@192.168.150.234:5432/new_db"
DATABASE_URL = "postgresql://postgres:@localhost:5432/new_db"

engine = create_engine(DATABASE_URL)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# def reset_database():
#     try:
#         db = SessionLocal()
#         # –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
#         db.execute(text("SET session_replication_role = 'replica';"))
#         # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
#         tables = ["daniam02", "new_test1_new_new", "newtest3", "users", "weather", "text05"]
#         for table in tables:
#             db.execute(text(f"TRUNCATE TABLE {table} RESTART IDENTITY CASCADE;"))
#             print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –æ—á–∏—â–µ–Ω–∞")
#         # –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ
#         db.execute(text("SET session_replication_role = 'origin';"))
#         db.commit()
#         db.close()

#         print("üéâ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

#     except Exception as e:
#         print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã:", e)

# # –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã
# reset_database()